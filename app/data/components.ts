export const componentsData = [
  {
    "name": "Button",
    "code": "import { cva, VariantProps } from 'class-variance-authority';\n\n const buttonStyles = cva(\n\t'flex items-center justify-center px-4 py-2 rounded font-medium focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-white dark:focus:ring-offset-black focus:ring-offset-1 disabled:opacity-60 disabled:pointer-events-none hover:bg-opacity-80',\n\t{\n\t\tvariants: {\n\t\t\tintent: {\n\t\t\t\tprimary: 'bg-orange-500 text-white',\n\t\t\t\tsecondary:\n\t\t\t\t\t'bg-gray-200 text-gray-900 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-100 focus:ring-gray-500',\n\t\t\t\tdanger: 'bg-red-500 text-white focus:ring-red-500',\n\t\t\t},\n\t\t\tfullWidth: {\n\t\t\t\ttrue: 'w-full',\n\t\t\t},\n\t\t\tcentered: {\n\t\t\t\ttrue: 'm-auto'\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tintent: 'primary',\n\t\t},\n\t},\n);\n\n\nexport interface ButtonProps extends\n\t\tVariantProps<typeof buttonStyles> {\n\t\t\tchildren: string,\n\t\t\thref?: string\n\t\t}\n\nexport default function Button({ intent, children, fullWidth, centered, href, ...props }: ButtonProps) {\n\t// Conditional rendering based on the presence of 'href'\n\treturn href ? (\n\t\t<a target='_blank' rel='noopener noreferrer' href={href} className={buttonStyles({ intent, fullWidth, centered })} {...props}>\n\t\t{children}\n\t\t</a>\n\t) : (\n\t\t<button className={buttonStyles({ intent, fullWidth, centered })} {...props}>\n\t\t{children}\n\t\t</button>\n\t);\n}\n"
  },
  {
    "name": "Card",
    "code": "import { cva, VariantProps } from 'class-variance-authority';\nimport { ReactNode } from 'react';\n\n const cardStyles = cva(\n\t'flex items-center justify-center px-10 py-10 rounded-lg',\n\t{\n\t\tvariants: {\n\t\t\tintent: {\n\t\t\t\tprimary: 'bg-white border shadow-sm text-white',\n\t\t\t\tsecondary:\n\t\t\t\t\t'bg-gray-200 text-gray-900 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-100 focus:ring-gray-500',\n\t\t\t\tdanger: 'bg-red-500 text-white focus:ring-red-500',\n\t\t\t},\n\t\t\tfullWidth: {\n\t\t\t\ttrue: 'w-full',\n\t\t\t},\n\t\t\tcentered: {\n\t\t\t\ttrue: 'm-auto'\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tintent: 'primary',\n\t\t},\n\t},\n);\n\n\n\nexport interface CardProps extends\n\t\tVariantProps<typeof cardStyles> {\n\t\t\tchildren: ReactNode,\n\t\t}\n\nexport default function Card({ intent, children, fullWidth, centered, ...props }: CardProps) {\n\treturn (\n\t\t<div className={cardStyles({ intent, fullWidth, centered })} {...props} >{children}</div>\n\t);\n}\n"
  },
  {
    "name": "CodeBlock",
    "code": "'use client'\n\nimport {FC} from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\ntype CodeBlockProps = {\n    codeSnippet: string;\n};\n\nconst CodeBlock: FC<CodeBlockProps> = ({ codeSnippet }) => {\n    // Copy to Clipboard Function\n    const copyToClipboard = async () => {\n        try {\n            await navigator.clipboard.writeText(codeSnippet);\n            console.log('Code copied to clipboard!');\n            // You can add more feedback logic here\n        } catch (err) {\n            console.error('Error in copying text: ', err);\n        }\n    };\n\n    return (\n     \n        <div className='relative'>\n          \n            <button \n                onClick={copyToClipboard}\n                className=' absolute top-6 right-4 cursor-pointer '\n            >\n                <svg className='stroke-slate-200' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" ><rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/></svg>\n            </button>\n           \n                \n            <SyntaxHighlighter language=\"node-repl\" style={darcula} customStyle={{ paddingTop: \"12px\"}}>\n                {codeSnippet}\n            </SyntaxHighlighter>\n            \n        </div>\n        \n    );\n};\n\nexport default CodeBlock;"
  },
  {
    "name": "Components",
    "code": "\n// componentsMap.ts\nimport { ComponentType } from 'react';\nimport Button from '@ui/Button';\nimport Card from '@ui/Card';\n// import other components\n\n// Use React.ComponentType<any> to allow any props\nconst componentsMap: Record<string, ComponentType<any>> = {\n  Button: Button,\n  Card: Card,\n  // Add other components here\n};\n\nexport default componentsMap;\n"
  },
  {
    "name": "Icon",
    "code": ""
  },
  {
    "name": "Select",
    "code": "'use client'\n\nimport React, { FC, ReactNode, useState } from 'react';\nimport Button from './Button';\nimport Card from './Card';\nimport { componentsData } from '@/app/data/components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\ntype CodeBlockProps = {\n    codeSnippet: string;\n};\n\nconst CodeBlock: FC<CodeBlockProps> = ({ codeSnippet }) => {\n    // Copy to Clipboard Function\n    const copyToClipboard = async () => {\n        try {\n            await navigator.clipboard.writeText(codeSnippet);\n            console.log('Code copied to clipboard!');\n            // You can add more feedback logic here\n        } catch (err) {\n            console.error('Error in copying text: ', err);\n        }\n    };\n\n    return (\n     \n        <div className='relative'>\n          \n            <button \n                onClick={copyToClipboard}\n                className=' absolute top-6 right-4 cursor-pointer '\n            >\n                <svg className='stroke-slate-200' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" ><rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/></svg>\n            </button>\n           \n                \n            <SyntaxHighlighter language=\"typescript\" style={darcula} customStyle={{ paddingTop: \"40px\"}}>\n                {codeSnippet}\n            </SyntaxHighlighter>\n            \n        </div>\n        \n    );\n};\n\n\n\n\n// Adjust the path as necessary\n\nconst SelectComponent = () => {\n  const [selectedComponent, setSelectedComponent] = useState('');\n  const [codeSnippet, setCodeSnippet] = useState('');\n  const [viewMode, setViewMode] = useState('preview');\n\n  const handleComponentChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedName = event.target.value;\n    setSelectedComponent(selectedName);\n\n    const componentData = componentsData.find(comp => comp.name === selectedName);\n    if (componentData) {\n      setCodeSnippet(componentData.code);\n    } else {\n      setCodeSnippet('');\n    }\n\n    setViewMode('preview');\n  };\n\n\n\n  const renderDynamicComponent = () => {\n    if (!selectedComponent) {\n      \n      return <div className=\" py-4\">Oh, hi. Nothing to see here. Select a component!</div>;\n    }\n\n    switch (selectedComponent) {\n      case 'Button':\n        return <Card><Button>Button</Button></Card>;\n      case 'Card':\n        return <Card><div>Card</div></Card>;\n      // Add cases for other components\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div>\n      <select className='mb-2 p-2 rounded-md cursor-pointer' onChange={handleComponentChange} value={selectedComponent}>\n        <option value=\"\">Select a component</option>\n        <option value=\"Button\">Button</option>\n        <option value=\"Card\">Card</option>\n        {/* Add more options here */}\n      </select>\n\n    {selectedComponent && (\n      <div className=\"flex gap-2 mb-4 border-b border-gray-300\">\n        <span \n          className={\\`cursor-pointer ${viewMode === 'preview' ? 'border-b-2 border-orange-500' : ''}\\`}\n          onClick={() => setViewMode('preview')}\n        >\n          Preview\n        </span>\n        <span \n          className={\\`cursor-pointer  ${viewMode === 'code' ? 'border-b-2 border-orange-500' : ''}\\`}\n          onClick={() => setViewMode('code')}\n        >\n          Code\n        </span>\n      </div>\n    )}\n\n    {viewMode === 'preview' ? renderDynamicComponent() : (selectedComponent && <CodeBlock codeSnippet={codeSnippet} />)}\n</div> \n  );\n};\n\nexport default SelectComponent;\n"
  }
];